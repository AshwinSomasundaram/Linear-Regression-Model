# -*- coding: utf-8 -*-
"""LinearReg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1815hwFcZLTT_hJvEiD5KDS4YliT96sxw
"""

#Linear Regression Assignment

#def calcLossFunction():
 # length = len(points)
  #count =0
  #loss =0
  #while count<8:
   # loss+=1/length *((a*points[count][0])+b-points[count][1])
  #print(loss)

file = open("/data.train","r")
points=[]
for line in file:
  data = line.split(",")
  intData = [int(data[0]),float(data[1])]
  points.append(intData)
#print(points)

#points = [[87,531.9343334085124],[-364,-2185.347966099026],[-497,-3073.1944321440214],[-804,-5527.146245581311],[127,846.4008749950084],[508,3139.497033465891],[-55,-349.89866970746203],[795,4952.357125243452]]
a=1 #initial slope
b=0 #intial intercept
print(calcLossFunction())
learningRateA = 0.000000001
learningRateB = 0.000000001
#print(changeA())
#print(changeB())
stepA=1
stepB=1
cnt=0
loss = 0
while  abs(loss-calcLossFunction())>  0.00001:
  print(calcLossFunction())
  loss = calcLossFunction()
  tempA =a
  tempB=b
  stepA = changeA()*learningRateA
  print(f"stepA is: {stepA}")
  tempA=a-stepA
  stepB = changeB()*learningRateB
  print(f"stepB is: {stepB}")
  tempB=b-stepB
  a=tempA
  b=tempB
  #loss=calcLossFunction()
  cnt+=1
print(a)
print(b)
print(calcLossFunction())

def calcLossFunction():
  length = len(points)
  count =0
  loss =0
  while count<length:
    loss+=1/length *((a*points[count][0])+b-points[count][1])*((a*points[count][0])+b-points[count][1])
    count+=1
  return loss

def changeA():
  length1 = len(points)
  count1=0
  lossDerA=0
  while count1<length1:
    lossDerA+=2*((a*points[count1][0])+b-points[count1][1])*(points[count1][0])
    count1+=1
  return lossDerA
def changeB():
  length2 = len(points)
  count2=0
  lossDerB =0
  while count2<length2:
    lossDerB+=2*((a*points[count2][0])+b-points[count2][1])
    count2+=1
  return lossDerB